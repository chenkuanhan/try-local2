mkdir cd add data

git init

git remote add origin     ...........

git branch -M  

git pull --rebase origin side1

git add *

git commit -m "upload side1"


git push origin side1

------------------------------------------
hank@hank-System-Product-Name:~$ mkdir transfer_station
hank@hank-System-Product-Name:~$ cd transfer_station/
hank@hank-System-Product-Name:~/transfer_station$ git init
hint: Using 'master' as the name for the initial branch. This default branch name
hint: is subject to change. To configure the initial branch name to use in all
hint: of your new repositories, which will suppress this warning, call:
hint: 
hint: 	git config --global init.defaultBranch <name>
hint: 
hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and
hint: 'development'. The just-created branch can be renamed via this command:
hint: 
hint: 	git branch -m <name>
Initialized empty Git repository in /home/hank/transfer_station/.git/
hank@hank-System-Product-Name:~/transfer_station$ git remote add git@github.com:chencrownburger/data-transfer.git
usage: git remote add [<options>] <name> <url>

    -f, --fetch           fetch the remote branches
    --tags                import all tags and associated objects when fetching
                          or do not fetch any tag at all (--no-tags)
    -t, --track <branch>  branch(es) to track
    -m, --master <branch>
                          master branch
    --mirror[=(push|fetch)]
                          set up remote as a mirror to push to or fetch from

hank@hank-System-Product-Name:~/transfer_station$ git remote add origin git@github.com:chencrownburger/data-transfer.git
hank@hank-System-Product-Name:~/transfer_station$ git branch - M data_brain
usage: git branch [<options>] [-r | -a] [--merged] [--no-merged]
   or: git branch [<options>] [-l] [-f] <branch-name> [<start-point>]
   or: git branch [<options>] [-r] (-d | -D) <branch-name>...
   or: git branch [<options>] (-m | -M) [<old-branch>] <new-branch>
   or: git branch [<options>] (-c | -C) [<old-branch>] <new-branch>
   or: git branch [<options>] [-r | -a] [--points-at]
   or: git branch [<options>] [-r | -a] [--format]

Generic options
    -v, --verbose         show hash and subject, give twice for upstream branch
    -q, --quiet           suppress informational messages
    -t, --track           set up tracking mode (see git-pull(1))
    -u, --set-upstream-to <upstream>
                          change the upstream info
    --unset-upstream      unset the upstream info
    --color[=<when>]      use colored output
    -r, --remotes         act on remote-tracking branches
    --contains <commit>   print only branches that contain the commit
    --no-contains <commit>
                          print only branches that don't contain the commit
    --abbrev[=<n>]        use <n> digits to display object names

Specific git-branch actions:
    -a, --all             list both remote-tracking and local branches
    -d, --delete          delete fully merged branch
    -D                    delete branch (even if not merged)
    -m, --move            move/rename a branch and its reflog
    -M                    move/rename a branch, even if target exists
    -c, --copy            copy a branch and its reflog
    -C                    copy a branch, even if target exists
    -l, --list            list branch names
    --show-current        show current branch name
    --create-reflog       create the branch's reflog
    --edit-description    edit the description for the branch
    -f, --force           force creation, move/rename, deletion
    --merged <commit>     print only branches that are merged
    --no-merged <commit>  print only branches that are not merged
    --column[=<style>]    list branches in columns
    --sort <key>          field name to sort on
    --points-at <object>  print only branches of the object
    -i, --ignore-case     sorting and filtering are case insensitive
    --format <format>     format to use for the output

hank@hank-System-Product-Name:~/transfer_station$ git branch -M data_brain
hank@hank-System-Product-Name:~/transfer_station$ open .
hank@hank-System-Product-Name:~/transfer_station$ subl python_course.py
hank@hank-System-Product-Name:~/transfer_station$ git pull --rebase origin data_brain
remote: Enumerating objects: 6, done.
remote: Counting objects: 100% (6/6), done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 6 (delta 0), reused 3 (delta 0), pack-reused 0
Unpacking objects: 100% (6/6), 872 bytes | 872.00 KiB/s, done.
From github.com:chencrownburger/data-transfer
 * branch            data_brain -> FETCH_HEAD
 * [new branch]      data_brain -> origin/data_brain
hank@hank-System-Product-Name:~/transfer_station$ ls
python_course.py  README.md  testing.py
hank@hank-System-Product-Name:~/transfer_station$ git add "upload python_course.py"
fatal: pathspec 'upload python_course.py' did not match any files
hank@hank-System-Product-Name:~/transfer_station$ git add *
hank@hank-System-Product-Name:~/transfer_station$ git commit -m "upload python_course.py"
[data_brain 66df73a] upload python_course.py
 1 file changed, 1 insertion(+)
 create mode 100644 python_course.py
hank@hank-System-Product-Name:~/transfer_station$ git push origin origin data_brain
error: src refspec origin does not match any
error: failed to push some refs to 'github.com:chencrownburger/data-transfer.git'
hank@hank-System-Product-Name:~/transfer_station$ git push origin data_brain
Enumerating objects: 4, done.
Counting objects: 100% (4/4), done.
Delta compression using up to 6 threads
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 355 bytes | 355.00 KiB/s, done.
Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
To github.com:chencrownburger/data-transfer.git
   0f2e8f8..66df73a  data_brain -> data_brain
hank@hank-System-Product-Name:~/transfer_station$
